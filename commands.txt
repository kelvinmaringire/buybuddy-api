######################################
Start new project
######################################

docker compose run web wagtail start buybuddy .

docker compose run web python manage.py migrate

docker compose run web python manage.py createsuperuser

docker compose exec web pip freeze > requirements.txt 

######################################
VPS start commands
######################################

sudo apt update

sudo apt upgrade -y

sudo apt install ufw -y

sudo ufw enable

sudo ufw allow 80/tcp && sudo ufw allow 8000/tcp && sudo ufw allow 443/tcp && sudo ufw allow 22/tcp && sudo ufw allow 6379/tcp

sudo ufw reload

sudo ufw status

######################################
Install Docker on VPS
######################################

sudo apt update && sudo apt install -y ca-certificates curl gnupg lsb-release

sudo install -m 0755 -d /etc/apt/keyrings

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

sudo chmod a+r /etc/apt/keyrings/docker.gpg

echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo apt update

sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

docker --version

sudo usermod -aG docker $USER

docker run hello-world

######################################
Clone and Setup Wagtail Project
######################################

mkdir -p ~/webapps

cd ~/webapps

sudo git clone https://github.com/kelvinmaringire/buybuddy-api.git

cd buybuddy-api

nano .env   # (paste your environment variables here)

chmod +x entrypoint.sh

docker compose up -d

######################################
PostgreSQL Backup & Restore
######################################

# Backup inside container
docker compose exec db pg_dump -U postgres -d buybuddy_db -F c -f /var/lib/postgresql/data/data_backup.dump

# Copy backup to local machine
docker cp buybuddy_db:/var/lib/postgresql/data/data_backup.dump ./data_backup.dump

### ðŸ”¹ Restore Database

docker cp ./data_backup.dump buybuddy_db:/tmp/data_backup.dump

docker compose exec db bash

psql -U postgres -c "DROP DATABASE buybuddy_db;"

psql -U postgres -c "CREATE DATABASE buybuddy_db;"

pg_restore -U postgres -d buybuddy_db /tmp/data_backup.dump

exit

######################################
SSL with Certbot (Docker)
######################################

docker exec buybuddy_nginx mkdir -p /app/static/.well-known/acme-challenge

docker exec buybuddy_certbot certbot certonly \
    --webroot \
    --webroot-path /app/static \
    -d buybuddysave.co.za -d www.buybuddysave.co.za \
    --email ringazm@gmail.com \
    --agree-tos \
    --non-interactive \
    --no-eff-email

######################################
Nginx buybuddy.conf
######################################

# Redirect www.buybuddysave.co.za to buybuddysave.co.za
server {
    listen 80;
    server_name www.buybuddysave.co.za;
    return 301 http://buybuddysave.co.za$request_uri;
}

# Main HTTP server (forces HTTPS)
server {
    listen 80;
    server_name buybuddysave.co.za;

    location /.well-known/acme-challenge/ {
        alias /app/static/.well-known/acme-challenge/;
    }

    location /static/ {
        alias /app/static/;  # Point to your STATIC_ROOT
    }

    location /media/ {
        alias /app/media/;   # Point to your MEDIA_ROOT
    }
    
    # Force HTTPS for everything else
    location / {
        return 301 https://$host$request_uri;
    }
}

# HTTPS server
server {
    listen 443 ssl;
    server_name buybuddysave.co.za;

    ssl_certificate     /etc/letsencrypt/live/buybuddysave.co.za/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/buybuddysave.co.za/privkey.pem;

    # security / performance tweaks (optional but recommended)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    location /static/ {
        alias /app/static/;
    }

    location /media/ {
        alias /app/media/;
    }

    location / {
        proxy_pass http://web:8000; # Gunicorn container
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
        # Proxy WebSocket connections (Django Channels)
    location /ws/ {
        proxy_pass http://web:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

docker exec buybuddy_nginx nginx -t

docker exec buybuddy_nginx nginx -s reload
